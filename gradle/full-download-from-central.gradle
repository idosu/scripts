/*
 * 1. Set GRADLE_USER_HOME to 'deps'
 * 2. Add all your dependecies
 * 3. Retrieve them using 'eclipseClasspath' task
 * 4. Run the task createRepo
 */
apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
	mavenCentral()
}

def json(String url) {
	def jsonSlurper = new groovy.json.JsonSlurper()
	def jsonUrl = new URL(url)

	return jsonSlurper.parseText(jsonUrl.text);
}

def central(String group, String artifact, String version) {
	def q = URLEncoder.encode("g:\"${group}\" AND a:\"${artifact}\" AND v:\"${version}\"", "UTF-8")
	def rows = 1
	return json("http://search.maven.org/solrsearch/select?q=${q}&rows=${rows}&wt=json").response.docs[0]
}

task createRepo() << {
	def repo = file("build/repo")
	def dir = 'deps/caches/modules-2/files-2.1/'

	fileTree(dir: dir, include: '**/*.pom')
		.collect { relativePath(it).substring(dir.length()).split('[/\\\\]') }
		.collect { [
			group: it[0],
			artifact: it[1],
			version: it[2]
		] }
		.collect { [
			group: it.group,
			artifact: it.artifact,
			version: it.version,
			ec: central(it.group, it.artifact, it.version).ec
		] }
		.collect { x ->
			x.ec.collect { [
				group: x.group,
				artifact: x.artifact,
				version: x.version,
				ec: it
			] }
		}
		.flatten()
		.collect { [
			group: it.group,
			artifact: it.artifact,
			version: it.version,
			ec: it.ec,
			files: fileTree(dir: dir, include: "${it.group}/${it.artifact}/${it.version}/*/${it.artifact}-${it.version}${it.ec}")
		] }
		.each {
			// TODO(idosu): Do not exit on failure
			String moduleDirName = "${it.group.replace('.','/')}/${it.artifact}/${it.version}"
			File moduleDir = new File(repo, moduleDirName)
			GFileUtils.mkdirs(moduleDir)
			
			String fileName = "${it.artifact}-${it.version}${it.ec}"
			File destFile = new File(moduleDir, fileName)

			if (it.files.isEmpty()) {
				def url = new URL("http://search.maven.org/remotecontent?filepath=${moduleDirName}/${fileName}")
				println "Dn  ${url}..."

				URLConnection conn = url.openConnection()
				url = new URL(conn.headerFields['Location'].find())

				url.withInputStream{ i -> destFile.withOutputStream{ it << i } }
			} else {
				File src = it.files.find();
				println "Cp ${src}..."
				if (it.files.size() != 1) {
					println "  WARN: Duplicated: ${it}"
				}
				GFileUtils.copyFile(src, destFile)
			}
		}
}
