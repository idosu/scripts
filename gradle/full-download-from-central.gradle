/*
 * 1. Set GRADLE_USER_HOME to 'deps'
 * 2. Add all your dependecies
 * 3. Retrieve them using 'eclipseClasspath' task
 * 4. Run the task createRepo
 */
apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
	mavenCentral()
}

ext.json = { String url ->
	def jsonSlurper = new groovy.json.JsonSlurper()
	def jsonUrl = new URL(url)

	def response = jsonUrl.text;

	logger.info "URL: $url"
	logger.info "RESPONSE: $response"

	return jsonSlurper.parseText(response);
}

URL centralRemoteContent(String filepath) {
	def url = new URL("http://search.maven.org/remotecontent?filepath=$filepath")
	URLConnection conn = url.openConnection()
	return new URL(conn.headerFields['Location'].find())
}

def central(String group, String artifact, String version) {
	def q = URLEncoder.encode("g:\"$group\" AND a:\"$artifact\" AND v:\"$version\"", "UTF-8")
	def rows = 1
	
	def docs = json("http://search.maven.org/solrsearch/select?q=$q&rows=$rows&wt=json").response.docs[0]
	if (docs) {
		return docs.ec
	}
	
	logger.warn "Could not find $group:$artifact:$version in central search, trying to escape html..."
	return centralRemoteContent("${group.replace('.', '/')}/$artifact/$version").text
		.findAll(/<a href="[^"]+">$artifact-$version([^<]+)<\/a>/) { _, ec -> ec }
		.findAll({ !it.endsWith('.sha1') })
		.findAll({ !it.endsWith('.md5') })
		.findAll({ !it.endsWith('.asc') })
}

task createRepo() << {
	def repo = file("build/repo")
	def dir = 'deps/caches/modules-2/files-2.1/'

	fileTree(dir: dir, include: '**/*.pom')
		.collect { relativePath(it).substring(dir.length()).split('[/\\\\]') }
		.collect { [
			group: it[0],
			artifact: it[1],
			version: it[2]
		] }
		.collect { [
			group: it.group,
			artifact: it.artifact,
			version: it.version,
			ec: central(it.group, it.artifact, it.version)
		] }
		.collect { x ->
			x.ec.collect { [
				group: x.group,
				artifact: x.artifact,
				version: x.version,
				ec: it
			] }
		}
		.flatten()
		.collect { [
			group: it.group,
			artifact: it.artifact,
			version: it.version,
			ec: it.ec,
			files: fileTree(dir: dir, include: "$it.group/$it.artifact/$it.version/*/$it.artifact-$it.version$it.ec")
		] }
		.each {
			// TODO(idosu): Do not exit on failure
			String moduleDirName = "${it.group.replace('.','/')}/$it.artifact/$it.version"
			File moduleDir = new File(repo, moduleDirName)
			GFileUtils.mkdirs(moduleDir)
			
			String fileName = "$it.artifact-$it.version$it.ec"
			File destFile = new File(moduleDir, fileName)

			if (it.files.isEmpty()) {
				URL url = centralRemoteContent("$moduleDirName/$fileName");
				logger.lifecycle "Dn $url..."
				try {
					url.withInputStream { i -> destFile.withOutputStream { it << i } }
				} catch (Exception e) {
					logger.error "Could not get $url...", e
				}
			} else {
				File src = it.files.find();
				logger.lifecycle "Cp $src..."
				if (it.files.size() != 1) {
					logger.warn "Duplicated: $it"
				}
				GFileUtils.copyFile(src, destFile)
			}
		}
}
